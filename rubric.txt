
This file is https://github.com/GregorKiczales/spd/blob/master/rubric.txt.

Files that don't at least run get 0 marks.  Files that run, but
have failing tests are assessed according to the following rubric.
This means that if you have a test that causes an error you should
comment it out. If you have a test that fails, and you believe the
test itself is correct, you are better off to leave it in.

Note that in any given assigment we may choose to assess only some
parts of the rubric.  This especially happens later in the term, where
we might focus on just the origin of template, definition and correctness
elements of the HtDF rubric for a function. This happens because once
the functions become difficult enough to design, we will know that if
your function works properly, you will almost certainly have followed
the design recipe. 

In all the sub-sections below stop grading at the first line that
fails. So a signature that is not well formed gets 0, even if it has
some correct types.  No partial credit is awarded other than what the
rubric explicitly mentions.

*** HtDF ***

/24

Signature:
  1 well formed (at least one arg type, ->, and one result type)
  2  + arguments (correct number and types)
  3  + result (correct type)

Purpose:
  1 well formed (two ;;, <space>, <= 80 chars) 
  2  + clear, grammatically correct
  3  + resolves all design ambiguity (border cases etc.)

Stub:
  1 well formed (well formed function def'n, one semi comment)
  2  + number of arguments matches signature
  3  + result type matches signature

Tests:
  1 well formed (correct name, # args matches signature, base case first...)
  2  + at least 2 tests
  3  + sufficient tests

Origin of template:
  1 well formed
  2  + at least one correct source
  3  + all correct sources

Definition:
  1 well formed
  2  + template is intact
  3  + ... completely filled in

Correctness:
  1 all handin file tests pass
  2  + at least one supplemental test passes
  3  + all supplemental tests pass

Style:
  1 All names (function, types) match naming convention
  2  + indentation matches convention and CMD-I doesn't move anything
  3  + commenting (number of semis, placement, line length) and
       line breaking matches convention (no dangling ")" etc.)

*** HtDD ***

/15

Type comment and define struct:
  1 well formed  (Type is ... <possible newline> - well formed types...
  2  + appropriate form of data for information 
  3  + relevant domain information is fully captured

Interpretation:
  1 present
  2  + explains all cases of data
  3  + fully explains representation, including units for numbers,
       directions etc.

Examples (N/A for enumerations):
  1 present and well formed
  2 covers simple cases
  3 covers corner cases

(remember that data examples are intended to explain the representation,
 they do not have to support function testing)

Template AND rules used:
  1 well formed  (@ tag and fn-for-xxx definition)
  2  + annotation and function are in concordance
  3  + annotation and function completely match type comment

Style:
  1 Type, example and template match naming conventions
  2  + indentation matches covention, CMD-I moves nothing
  3  + commenting (number of semis, placement, line length) and
       line breaking matches convention (no dangling ")" etc.)


HTDW MAIN, SIGNATURES ON SIDE OF BIG-BANG

